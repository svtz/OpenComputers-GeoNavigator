// <auto-generated />
using System;
using GeoNavigator.Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GeoNavigator.Server.Migrations
{
    [DbContext(typeof(GeoContext))]
    [Migration("20190622191645_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("GeoNavigator.Server.Models.Block", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Dimension");

                    b.Property<int>("Ore");

                    b.Property<long>("PosX");

                    b.Property<long>("PosY");

                    b.Property<long>("PosZ");

                    b.HasKey("Id");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("GeoNavigator.Server.Models.VeinDimensionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Dimension");

                    b.Property<Guid>("VeinInfoId");

                    b.HasKey("Id");

                    b.HasIndex("VeinInfoId");

                    b.ToTable("VeinDimensions");
                });

            modelBuilder.Entity("GeoNavigator.Server.Models.VeinInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("YMax");

                    b.Property<int>("YMin");

                    b.HasKey("Id");

                    b.ToTable("Veins");
                });

            modelBuilder.Entity("GeoNavigator.Server.Models.VeinOreInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Ore");

                    b.Property<Guid>("VeinInfoId");

                    b.HasKey("Id");

                    b.HasIndex("VeinInfoId");

                    b.ToTable("VeinOres");
                });

            modelBuilder.Entity("GeoNavigator.Server.Models.VeinDimensionInfo", b =>
                {
                    b.HasOne("GeoNavigator.Server.Models.VeinInfo", "VeinInfo")
                        .WithMany("Dimensions")
                        .HasForeignKey("VeinInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GeoNavigator.Server.Models.VeinOreInfo", b =>
                {
                    b.HasOne("GeoNavigator.Server.Models.VeinInfo", "VeinInfo")
                        .WithMany("Ores")
                        .HasForeignKey("VeinInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
